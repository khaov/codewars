// Solution:

function bitMarch (n) {
  let start = [0, 0, 0, 0, 0, 0, 0, 0];
  let steps = 8 - n + 1;

  while(n >= 1) {
    start.shift();
    start.push(1);
    n--;
  }

  let march = [];
  let step = start;

  march.push(start)

  while (steps > 1) {
    step = step.slice(1, start.length);
    step.push(0);

    march.push(step);

    steps--
  }

  return march;
}

// Sample Tests:

bitMarch(1)
// [
//   [ 0, 0, 0, 0, 0, 0, 0, 1 ],
//   [ 0, 0, 0, 0, 0, 0, 1, 0 ],
//   [ 0, 0, 0, 0, 0, 1, 0, 0 ],
//   [ 0, 0, 0, 0, 1, 0, 0, 0 ],
//   [ 0, 0, 0, 1, 0, 0, 0, 0 ],
//   [ 0, 0, 1, 0, 0, 0, 0, 0 ],
//   [ 0, 1, 0, 0, 0, 0, 0, 0 ],
//   [ 1, 0, 0, 0, 0, 0, 0, 0 ],
// ]

bitMarch(2)
// [
//   [ 0, 0, 0, 0, 0, 0, 1, 1 ],
//   [ 0, 0, 0, 0, 0, 1, 1, 0 ],
//   [ 0, 0, 0, 0, 1, 1, 0, 0 ],
//   [ 0, 0, 0, 1, 1, 0, 0, 0 ],
//   [ 0, 0, 1, 1, 0, 0, 0, 0 ],
//   [ 0, 1, 1, 0, 0, 0, 0, 0 ],
//   [ 1, 1, 0, 0, 0, 0, 0, 0 ],
// ]

bitMarch(3)
// [
//   [0, 0, 0, 0, 0, 1, 1, 1, ],
//   [0, 0, 0, 0, 1, 1, 1, 0, ],
//   [0, 0, 0, 1, 1, 1, 0, 0, ],
//   [0, 0, 1, 1, 1, 0, 0, 0, ],
//   [0, 1, 1, 1, 0, 0, 0, 0, ],
//   [1, 1, 1, 0, 0, 0, 0, 0, ],
// ]
